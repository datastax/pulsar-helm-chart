#
#  Copyright 2021 DataStax, Inc.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
#

{{- if .Values.extra.function }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ template "pulsar.fullname" . }}-{{ .Values.function.component }}"
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ template "pulsar.name" . }}
    chart: {{ template "pulsar.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    component: {{ .Values.function.component }}
    cluster: {{ template "pulsar.fullname" . }}
data:
  functions_worker.yml: |-
    {{- if and .Values.enableTls .Values.tls.zookeeper.enabled }}
      {{- if .Values.extra.zookeepernp }}
    configurationStoreServers: {{ template "pulsar.fullname" . }}-{{ .Values.zookeeper.component }}-ca:2281,{{ template "pulsar.fullname" . }}-{{ .Values.zookeepernp.component }}-ca:2281
      {{- else }}
    configurationStoreServers: {{ template "pulsar.fullname" . }}-{{ .Values.zookeeper.component }}-ca:2281
      {{- end }}
    {{- else }}
      {{- if .Values.extra.zookeepernp }}
    configurationStoreServers: {{ template "pulsar.fullname" . }}-{{ .Values.zookeeper.component }}-ca:2181,{{ template "pulsar.fullname" . }}-{{ .Values.zookeepernp.component }}-ca:2181
      {{- else }}
    configurationStoreServers: {{ template "pulsar.fullname" . }}-{{ .Values.zookeeper.component }}-ca:2181
      {{- end }}
    {{- end }}
    {{- if and .Values.enableTls .Values.tls.zookeeper.enabled }}
      {{- if .Values.extra.zookeepernp }}
    zookeeperServers: {{ template "pulsar.fullname" . }}-{{ .Values.zookeeper.component }}-ca:2281,{{ template "pulsar.fullname" . }}-{{ .Values.zookeepernp.component }}-ca:2281
      {{- else }}
    zookeeperServers: {{ template "pulsar.fullname" . }}-{{ .Values.zookeeper.component }}-ca:2281
      {{- end }}
    {{- else }}
      {{- if .Values.extra.zookeepernp }}
    zookeeperServers: {{ template "pulsar.fullname" . }}-{{ .Values.zookeeper.component }}-ca:2181,{{ template "pulsar.fullname" . }}-{{ .Values.zookeepernp.component }}-ca:2181
      {{- else }}
    zookeeperServers: {{ template "pulsar.fullname" . }}-{{ .Values.zookeeper.component }}-ca:2181
      {{- end }}
    {{- end }}
    zooKeeperSessionTimeoutMillis: 30000
    pulsarFunctionsCluster: "{{ template "pulsar.fullname" . }}"
    workerId: "{{ template "pulsar.fullname" . }}-{{ .Values.function.component }}"
    workerHostname: "{{ template "pulsar.fullname" . }}-{{ .Values.function.component }}"
    workerPort: "6750"
    {{- if .Values.enableTls }}
    workerPortTls: "6751"
    tlsCertificateFilePath: "/pulsar/certs/tls.crt"
    {{- if or .Values.secrets .Values.createCertificates.selfSigned.enabled}}
    tlsTrustCertsFilePath: /pulsar/certs/ca.crt
    brokerClientTrustCertsFilePath: "/pulsar/certs/ca.crt"
    {{- else }}
    tlsTrustCertsFilePath: "{{ .Values.tlsCaPath }}/{{ .Values.tlsCaCert }}"
    brokerClientTrustCertsFilePath: "{{ .Values.tlsCaPath }}/{{ .Values.tlsCaCert }}"
    {{- end }}
    tlsKeyFilePath: "/pulsar/tls-pk8.key"
    {{- end }}
    {{- if and .Values.enableTls .Values.tls.function.enabled }}
    tlsEnabled: "true"
    useTls: "true"
    pulsarServiceUrl: "pulsar+ssl://{{ template "pulsar.fullname" . }}-{{ .Values.broker.component }}:6651"
    pulsarWebServiceUrl: "https://{{ template "pulsar.fullname" . }}-{{ .Values.broker.component }}:8443"
    {{- else }}
    pulsarServiceUrl: "pulsar://{{ template "pulsar.fullname" . }}-{{ .Values.broker.component }}:6650"
    pulsarWebServiceUrl: "http://{{ template "pulsar.fullname" . }}-{{ .Values.broker.component }}:8080"
    {{- end }}
    numFunctionPackageReplicas: "{{ .Values.function.functionReplicaCount }}"
    downloadDirectory: "/tmp/pulsar_functions"
    pulsarFunctionsNamespace: "public/functions"
    functionMetadataTopicName: "metadata"
    clusterCoordinationTopicName: "coordinate"
    numHttpServerThreads: "16"
    schedulerClassName: "org.apache.pulsar.functions.worker.scheduler.RoundRobinScheduler"
    functionAssignmentTopicName: "assignments"
    failureCheckFreqMs: "30000"
    rescheduleTimeoutMs: "60000"
    initialBrokerReconnectMaxRetries: "60"
    assignmentWriteMaxRetries: "60"
    instanceLivenessCheckFreqMs: "30000"
    topicCompactionFrequencySec: "1800"
    {{- if .Values.function.enableMetrics }}
    includeStandardPrometheusMetrics: "true"
    {{- end }}
    {{- if .Values.function.enableStateStorage }}
    {{- if .Values.function.stateStorageUrlOverride }}
    stateStorageServiceUrl: {{ .Values.function.stateStorageUrlOverride }}
    {{- else }}
    {{- if .Values.extra.stateStorage }}
    stateStorageServiceUrl: "bk://{{ template "pulsar.fullname" . }}-{{ .Values.stateStorage.component }}-ca:4181"
    {{- else }}
    stateStorageServiceUrl: {{ include "pulsar.bkConnectStringOne" . }}
    {{- end }}
    {{- end }}
    {{- end }}
    {{- if .Values.enableTokenAuth }}
    authenticationEnabled: "true"
    authorizationEnabled: "true"
    authorizationProvider: "org.apache.pulsar.broker.authorization.PulsarAuthorizationProvider"
    authenticationProviders: [{{.Values.function.authenticationProviders}}]
    properties:
      tokenPublicKey: "file:///pulsar/token-public-key/{{ .Values.tokenPublicKeyFile }}"
      {{- if .Values.keycloak.enabled }}
      openIDAllowedTokenIssuers: "{{ template "pulsar.get.http.or.https" . }}{{ template "pulsar.keycloak.fullname" .}}{{ template "pulsar.keycloak.issuer.port" .}}/auth/realms/{{ .Values.keycloak.realm }},{{ template "pulsar.get.http.or.https" . }}{{ template "pulsar.keycloak.fullname" .}}.{{ .Release.Namespace }}{{ template "pulsar.keycloak.issuer.port" .}}/auth/realms/{{ .Values.keycloak.realm }},{{ template "pulsar.get.http.or.https" . }}{{ template "pulsar.keycloak.fullname" .}}.{{ .Release.Namespace }}.svc.cluster.local{{ template "pulsar.keycloak.issuer.port" .}}/auth/realms/{{ .Values.keycloak.realm }}"
      {{- end }}
      {{- if .Values.function.customProperties }}
{{ toYaml .Values.function.customProperties | indent 6 }}
      {{- end }}
    clientAuthenticationPlugin: "org.apache.pulsar.client.impl.auth.AuthenticationToken"
    clientAuthenticationParameters: "file:///pulsar/token-superuser/superuser.jwt"
    superUserRoles:
        {{- range splitList "," .Values.superUserRoles }}
      - {{ . | quote }}
    {{- end }}
    {{- end }}
    connectorsDirectory: "./connectors"
    {{- if eq .Values.function.runtime "process" }}
    processContainerFactory:
      logDirectory:
      # change the jar location only when you put the java instance jar in a different location
      javaInstanceJarLocation:
      # change the python instance location only when you put the python instance jar in a different location
      pythonInstanceLocation:
      # change the extra dependencies location:
      extraFunctionDependenciesDir:
    {{- end }}
    {{- if eq .Values.function.runtime "kubernetes" }}
    secretsProviderConfiguratorClassName: org.apache.pulsar.functions.secretsproviderconfigurator.KubernetesSecretsProviderConfigurator
    kubernetesContainerFactory:
      # uri to kubernetes cluster, leave it to empty and it will use the kubernetes settings in function worker
      k8Uri:
      # the kubernetes namespace to run the function instances. it is `default`, if this setting is left to be empty
      jobNamespace: {{ .Release.Namespace }}
      # the docker image to run function instance. by default it is `datastax/pulsar-all`
      pulsarDockerImageName: {{ .Values.image.function.repository }}:{{ .Values.image.function.tag }}
      # the root directory of pulsar home directory in `pulsarDockerImageName`. by default it is `/pulsar`.
      # if you are using your own built image in `pulsarDockerImageName`, you need to set this setting accordingly
      pulsarRootDir: /pulsar
      # this setting only takes effects if `k8Uri` is set to null. if your function worker is running as a k8 pod,
      # setting this to true is let function worker to submit functions to the same k8s cluster as function worker
      # is running. setting this to false if your function worker is not running as a k8 pod.
      submittingInsidePod: true
      # setting the pulsar service url that pulsar function should use to connect to pulsar
      # if it is not set, it will use the pulsar service url configured in worker service
      pulsarServiceUrl: "pulsar://{{ template "pulsar.fullname" . }}-{{ .Values.broker.component }}:6650/"
      # setting the pulsar admin url that pulsar function should use to connect to pulsar
      # if it is not set, it will use the pulsar admin url configured in worker service
      pulsarAdminUrl: "http://{{ template "pulsar.fullname" . }}-{{ .Values.function.component }}:6750/"
      # the custom labels that function worker uses to select the nodes for pods
      #customLabels:
      # the directory for dropping extra function dependencies
      # if it is not an absolute path, it is relative to `pulsarRootDir`
      #extraFunctionDependenciesDir:
      # Additional memory padding added on top of the memory requested by the function per on a per instance basis
      percentMemoryPadding: 10
    # runtimeCustomizerClassName: "org.apache.pulsar.functions.runtime.kubernetes.BasicKubernetesManifestCustomizer"
    functionInstanceMinResources:
      cpu: {{ .Values.function.k8sMinResources.cpu }}
      ram: {{ .Values.function.k8sMinResources.ram }}
      disk: {{ .Values.function.k8sMinResources.disk }}
    {{- end }}
{{- end }}
