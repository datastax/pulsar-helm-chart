#
#  Copyright 2022 DataStax, Inc.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
#

{{- if .Values.extra.brokerSts }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ template "pulsar.fullname" . }}-{{ .Values.brokerSts.component }}"
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ template "pulsar.name" . }}
    chart: {{ template "pulsar.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    component: {{ .Values.brokerSts.component }}
    cluster: {{ template "pulsar.fullname" . }}
data:
  zookeeperServers:
    {{- if and .Values.enableTls .Values.tls.zookeeper.enabled }}
    {{- if .Values.extra.zookeepernp }}
    { template "pulsar.fullname" . }}-{{ .Values.zookeeper.component }}-ca.{{ template "pulsar.serviceDnsSuffix" . }}:2281,{{ template "pulsar.fullname" . }}-{{ .Values.zookeepernp.component }}-ca.{{ template "pulsar.serviceDnsSuffix" . }}:2281
    {{- else }}
    {{ template "pulsar.fullname" . }}-{{ .Values.zookeeper.component }}-ca.{{ template "pulsar.serviceDnsSuffix" . }}:2281
    {{- end }}
    {{- else }}
    {{- if .Values.extra.zookeepernp }}
    { template "pulsar.fullname" . }}-{{ .Values.zookeeper.component }}-ca.{{ template "pulsar.serviceDnsSuffix" . }}:2181,{{ template "pulsar.fullname" . }}-{{ .Values.zookeepernp.component }}-ca.{{ template "pulsar.serviceDnsSuffix" . }}:2181
    {{- else }}
    {{ template "pulsar.fullname" . }}-{{ .Values.zookeeper.component }}-ca.{{ template "pulsar.serviceDnsSuffix" . }}:2181
    {{- end }}
    {{- end }}
  configurationStoreServers:
    {{- if and .Values.enableTls .Values.tls.zookeeper.enabled }}
    {{- if .Values.extra.zookeepernp }}
    {{ template "pulsar.fullname" . }}-{{ .Values.zookeeper.component }}-ca.{{ template "pulsar.serviceDnsSuffix" . }}:2281,{{ template "pulsar.fullname" . }}-{{ .Values.zookeepernp.component }}-ca.{{ template "pulsar.serviceDnsSuffix" . }}:2281
    {{- else }}
    {{ template "pulsar.fullname" . }}-{{ .Values.zookeeper.component }}-ca.{{ template "pulsar.serviceDnsSuffix" . }}:2281
    {{- end }}
    {{- else }}
    {{- if .Values.extra.zookeepernp }}
    { template "pulsar.fullname" . }}-{{ .Values.zookeeper.component }}-ca.{{ template "pulsar.serviceDnsSuffix" . }}:2181,{{ template "pulsar.fullname" . }}-{{ .Values.zookeepernp.component }}-ca.{{ template "pulsar.serviceDnsSuffix" . }}:2181
    {{- else }}
    {{ template "pulsar.fullname" . }}-{{ .Values.zookeeper.component }}-ca.{{ template "pulsar.serviceDnsSuffix" . }}:2181
    {{- end }}
    {{- end }}
  clusterName: {{ template "pulsar.fullname" . }}
  {{- if .Values.brokerSts.functionsWorkerEnabled }}
  functionsWorkerEnabled: "true"
  PF_pulsarFunctionsCluster: {{ template "pulsar.fullname" . }}
  # Since function worker connects on localhost, we can always non-TLS ports
  # when running with the broker
  PF_pulsarServiceUrl: "pulsar://localhost:6650"
  PF_pulsarWebServiceUrl: "http://localhost:8080"
  {{- end }}
  {{- if .Values.brokerSts.webSocketServiceEnabled }}
  webSocketServiceEnabled: "true"
  {{- end }}
  allowAutoTopicCreationType: "non-partitioned"
  {{- if .Values.enableTokenAuth }}
  PF_clientAuthenticationPlugin: "org.apache.pulsar.client.impl.auth.AuthenticationToken"
  PF_clientAuthenticationParameters: "file:///pulsar/token-superuser/superuser.jwt"
  # For client conf so that we can run pulsar-admin health check
  authParams: "file:///pulsar/token-superuser-stripped.jwt"
  authPlugin: "org.apache.pulsar.client.impl.auth.AuthenticationToken"
  authorizationEnabled: "true"
  authenticationEnabled: "true"
  proxyRoles: "{{ .Values.proxyRoles }}"
  superUserRoles: "{{ .Values.superUserRoles }}"
  tokenPublicKey: "file:///pulsar/token-public-key/{{ .Values.tokenPublicKeyFile }}"
  {{- if .Values.openid.enabled }}
  brokerClientAuthenticationPlugin: "org.apache.pulsar.client.impl.auth.oauth2.AuthenticationOAuth2"
  brokerClientAuthenticationParameters: "{\"privateKey\":\"file:///pulsar/openid-client-credentials/superuserKey.json\",\"issuerUrl\":\"{{ .Values.openid.issuerUrl }}\",\"scope\":\"{{ .Values.openid.scope }}\",\"audience\":\"{{ .Values.openid.allowedAudience }}\"}"
  {{- else }} # There's probably a smarter way to write this so it's more readable but gets trimmed to one line so Jackson doesn't blow up on new lines when parsing.
  brokerClientAuthenticationPlugin: "org.apache.pulsar.client.impl.auth.AuthenticationToken"
  brokerClientAuthenticationParameters: "file:///pulsar/token-superuser/superuser.jwt"
  {{- end }}
  {{- if .Values.brokerSts.extraAuthProvider }} # There surely is a cleaner way to do all this...
  {{- if .Values.openid.enabled }}
  authenticationProviders: "{{ .Values.brokerSts.authenticationProviders }},{{ .Values.brokerSts.extraAuthProvider }},{{ .Values.openid.authenticationProvider }}"
  {{- else }}
  authenticationProviders: "{{ .Values.brokerSts.authenticationProviders }},{{ .Values.brokerSts.extraAuthProvider }}"
  {{- end }}
  {{- else }}
  {{- if .Values.openid.enabled }}
  authenticationProviders: "{{ .Values.brokerSts.authenticationProviders }},{{ .Values.openid.authenticationProvider }}"
  {{- else }}
  authenticationProviders: "{{ .Values.brokerSts.authenticationProviders }}"
  {{- end }}
  {{- end }}
  {{- if .Values.keycloak.enabled }}
  PULSAR_PREFIX_openIDAllowedTokenIssuers: "{{ template "pulsar.get.http.or.https" . }}{{ template "pulsar.keycloak.fullname" .}}{{ template "pulsar.keycloak.issuer.port" .}}/realms/{{ .Values.keycloak.realm }},{{ template "pulsar.get.http.or.https" . }}{{ template "pulsar.keycloak.fullname" .}}.{{ .Release.Namespace }}{{ template "pulsar.keycloak.issuer.port" .}}/realms/{{ .Values.keycloak.realm }},{{ template "pulsar.get.http.or.https" . }}{{ template "pulsar.keycloak.fullname" .}}.{{ template "pulsar.serviceDnsSuffix" . }}{{ template "pulsar.keycloak.issuer.port" .}}/realms/{{ .Values.keycloak.realm }}"
  {{- end }}
  {{- end }}

# Putting this section down here so it's easier to read:
{{- if .Values.openid.enabled }}
  PULSAR_PREFIX_openIDAllowedTokenIssuers: "{{ .Values.openid.issuerUrl }}"
  PULSAR_PREFIX_openIDAllowedAudience: "{{ .Values.openid.allowedAudience }}"
  PULSAR_PREFIX_openIDRoleClaim: "{{ .Values.openid.roleClaim }}"
  PULSAR_PREFIX_openIDAcceptedTimeLeewaySeconds: "{{ .Values.openid.acceptedTimeLeewaySeconds }}"
  PULSAR_PREFIX_openIDJwkCacheSize: "{{ .Values.openid.jwk.cacheSize }}"
  PULSAR_PREFIX_openIDJwkExpiresSeconds: "{{ .Values.openid.jwk.expiresSeconds }}"
  PULSAR_PREFIX_openIDJwkConnectionTimeoutMillis: "{{ .Values.openid.jwk.connectionTimeoutMillis }}"
  PULSAR_PREFIX_openIDJwkReadTimeoutMillis: "{{ .Values.openid.jwk.readTimeoutMillis }}"
  PULSAR_PREFIX_openIDMetadataCacheSize: "{{ .Values.openid.metadata.cacheSize }}"
  PULSAR_PREFIX_openIDMetadataExpiresSeconds: "{{ .Values.openid.metadata.expiresSeconds }}"
  PULSAR_PREFIX_openIDMetadataConnectionTimeoutMillis: "{{ .Values.openid.metadata.connectionTimeoutMillis }}"
  PULSAR_PREFIX_openIDMetadataReadTimeoutMillis: "{{ .Values.openid.metadata.readTimeoutMillis }}"
  PULSAR_PREFIX_openIDRequireHttps: "{{ .Values.openid.requireHttps }}"
  # Set following to true if admin console is configured to use Okta integration. The admin console uses the user model with local admin token, not Okta integration, according to notes from Ming-Hong Liu.
  PULSAR_PREFIX_openIDAttemptAuthenticationProviderToken: "{{ .Values.openid.attemptAuthenticationProviderToken }}"

{{- end }}

{{- if and (.Values.openid.enabled) (.Values.openid.withS4k) }}
  # It would be nice to do something like this to abstract some of the configs away from the Values file since it's pretty complex
{{- end }}

{{- if .Values.enableTls }}
  tlsEnabled: "true"
  tlsEnableHostnameVerification: "true"
  tlsCertificateFilePath: /pulsar/certs/tls.crt
  tlsKeyFilePath: /pulsar/tls-pk8.key
  {{- if or .Values.secrets .Values.createCertificates.selfSigned.enabled .Values.createCertificates.selfSignedPerComponent.enabled }}
  tlsTrustCertsFilePath: /pulsar/certs/ca.crt
  {{- else }}
  tlsTrustCertsFilePath: "{{ .Values.tlsCaPath }}/{{ .Values.tlsCaCert }}"
  {{- end }}
  tlsProtocols: "{{ .Values.tls.broker.tlsProtocols }}"
  brokerServicePortTls: "6651"
  brokerClientTlsEnabled: "true"
  webServicePortTls: "8443"
  tlsEnabledWithKeyStore: "true"
  tlsKeyStore: "/pulsar/tls.keystore.jks"
  tlsTrustStore: "/pulsar/tls.truststore.jks"
  {{- if or .Values.secrets .Values.createCertificates.selfSigned.enabled .Values.createCertificates.selfSignedPerComponent.enabled }}
  brokerClientTrustCertsFilePath: /pulsar/certs/ca.crt
  {{- else }}
  brokerClientTrustCertsFilePath: "{{ .Values.tlsCaPath }}/{{ .Values.tlsCaCert }}"
  {{- end }}
  {{- if .Values.tls.bookkeeper.enabled}}
  bookkeeperTLSClientAuthentication: "true"
  bookkeeperTLSKeyFileType: "PEM"
  bookkeeperTLSKeyFilePath: "/pulsar/tls-pk8.key"
  bookkeeperTLSCertificateFilePath: "/pulsar/certs/tls.crt"
  PULSAR_PREFIX_bookkeeper_tlsHostnameVerificationEnabled: "true"
  {{- if or .Values.secrets .Values.createCertificates.selfSigned.enabled .Values.createCertificates.selfSignedPerComponent.enabled }}
  bookkeeperTLSTrustCertsFilePath: /pulsar/certs/ca.crt
  {{- else }}
  bookkeeperTLSTrustCertsFilePath: "{{ .Values.tlsCaPath }}/{{ .Values.tlsCaCert }}"
  {{- end }}
  bookkeeperTLSTrustCertTypes: "PEM"
  PULSAR_PREFIX_bookkeeperTLSClientAuthentication: "true"
  PULSAR_PREFIX_bookkeeperTLSKeyFileType: "PEM"
  PULSAR_PREFIX_bookkeeperTLSKeyFilePath: "/pulsar/tls-pk8.key"
  PULSAR_PREFIX_bookkeeperTLSCertificateFilePath: "/pulsar/certs/tls.crt"
  PULSAR_PREFIX_bookkeeperTLSTrustCertTypes: "PEM"
  {{- if or .Values.secrets .Values.createCertificates.selfSigned.enabled .Values.createCertificates.selfSignedPerComponent.enabled }}
  PULSAR_PREFIX_bookkeeperTLSTrustCertsFilePath: /pulsar/certs/ca.crt
  {{- else }}
  PULSAR_PREFIX_bookkeeperTLSTrustCertsFilePath: "{{ .Values.tlsCaPath }}/{{ .Values.tlsCaCert }}"
  {{- end }}
  # See this BookKeeper PR for why this is necessary: https://github.com/apache/bookkeeper/pull/2300
  bookkeeperUseV2WireProtocol: "false"
  {{- end }}
{{- end }}
{{- if .Values.storageOffload.driver }}
{{- if eq .Values.storageOffload.driver "aws-s3" }}
  managedLedgerOffloadDriver: "{{ .Values.storageOffload.driver }}"
  s3ManagedLedgerOffloadBucket: "{{ .Values.storageOffload.bucket }}"
  s3ManagedLedgerOffloadRegion: "{{ .Values.storageOffload.region }}"
  AWS_ACCESS_KEY_ID: "{{ .Values.storageOffload.accessKey }}"
  AWS_SECRET_ACCESS_KEY: "{{ .Values.storageOffload.accessSecret }}" # pragma: allowlist secret
  {{- if .Values.storageOffload.managedLedgerOffloadAutoTriggerSizeThresholdBytes }}
  # Pre 2.6.0 value
  managedLedgerOffloadAutoTriggerSizeThresholdBytes: "{{ .Values.storageOffload.managedLedgerOffloadAutoTriggerSizeThresholdBytes }}"
  # Post 2.6.0 value
  PULSAR_PREFIX_managedLedgerOffloadThresholdInBytes: "{{ .Values.storageOffload.managedLedgerOffloadAutoTriggerSizeThresholdBytes }}"
  {{- end }}
  {{- if .Values.storageOffload.managedLedgerOffloadDeletionLagMs }}
  # Pre 2.6.0 value
  managedLedgerOffloadDeletionLagMs: "{{ .Values.storageOffload.managedLedgerOffloadDeletionLagMs }}"
  # Post 2.6.0 value
  PULSAR_PREFIX_managedLedgerOffloadDeletionLagInMillis: "{{ .Values.storageOffload.managedLedgerOffloadDeletionLagMs }}"
  {{- end }}
  {{- if .Values.storageOffload.maxBlockSizeInBytes }}
  s3ManagedLedgerOffloadMaxBlockSizeInBytes: "{{ .Values.storageOffload.maxBlockSizeInBytes }}"
  {{- end }}
  {{- if .Values.storageOffload.readBufferSizeInBytes }}
  s3ManagedLedgerOffloadReadBufferSizeInBytes: "{{ .Values.storageOffload.readBufferSizeInBytes }}"
  {{- end }}
{{- end }}
{{- if eq .Values.storageOffload.driver "s3" }}
  managedLedgerOffloadDriver: "{{ .Values.storageOffload.driver }}"
  s3ManagedLedgerOffloadBucket: "{{ .Values.storageOffload.bucket }}"
  s3ManagedLedgerOffloadRegion: "{{ .Values.storageOffload.region }}"
  {{- if .Values.extra.tardigrade}}
  s3ManagedLedgerOffloadServiceEndpoint: "http://{{ .Release.Name }}-tardigrade-gateway-svc:{{ .Values.tardigrade.service.port }}"
  AWS_ACCESS_KEY_ID: "{{ .Values.tardigrade.accessKey }}"
  AWS_SECRET_ACCESS_KEY: "{{ .Values.tardigrade.secretKey }}"
  {{- else }}
  AWS_ACCESS_KEY_ID: "{{ .Values.storageOffload.accessKey }}"
  AWS_SECRET_ACCESS_KEY: "{{ .Values.storageOffload.accessSecret }}" # pragma: allowlist secret
  s3ManagedLedgerOffloadServiceEndpoint: "{{ .Values.storageOffload.serviceEndpoint }}"
  {{- end }}
  {{- if .Values.storageOffload.managedLedgerOffloadAutoTriggerSizeThresholdBytes }}
  # Pre 2.6.0 value
  managedLedgerOffloadAutoTriggerSizeThresholdBytes: "{{ .Values.storageOffload.managedLedgerOffloadAutoTriggerSizeThresholdBytes }}"
  # Post 2.6.0 value
  PULSAR_PREFIX_managedLedgerOffloadThresholdInBytes: "{{ .Values.storageOffload.managedLedgerOffloadAutoTriggerSizeThresholdBytes }}"
  {{- end }}
  {{- if .Values.storageOffload.managedLedgerOffloadDeletionLagMs }}
  # Pre 2.6.0 value
  managedLedgerOffloadDeletionLagMs: "{{ .Values.storageOffload.managedLedgerOffloadDeletionLagMs }}"
  # Post 2.6.0 value
  PULSAR_PREFIX_managedLedgerOffloadDeletionLagInMillis: "{{ .Values.storageOffload.managedLedgerOffloadDeletionLagMs }}"
  {{- end }}
  {{- if .Values.storageOffload.maxBlockSizeInBytes }}
  s3ManagedLedgerOffloadMaxBlockSizeInBytes: "{{ .Values.storageOffload.maxBlockSizeInBytes }}"
  {{- end }}
  {{- if .Values.storageOffload.readBufferSizeInBytes }}
  s3ManagedLedgerOffloadReadBufferSizeInBytes: "{{ .Values.storageOffload.readBufferSizeInBytes }}"
  {{- end }}
{{- end }}
{{- if eq .Values.storageOffload.driver "google-cloud-storage" }}
  managedLedgerOffloadDriver: "{{ .Values.storageOffload.driver }}"
  gcsManagedLedgerOffloadBucket: "{{ .Values.storageOffload.bucket }}"
  gcsManagedLedgerOffloadRegion: "{{ .Values.storageOffload.region }}"
  gcsManagedLedgerOffloadServiceAccountKeyFile: "/pulsar/gcp-service-account/{{ .Values.storageOffload.gcsServiceAccountJsonFile }}"
  {{- if .Values.storageOffload.managedLedgerOffloadAutoTriggerSizeThresholdBytes }}
  # Pre 2.6.0 value
  managedLedgerOffloadAutoTriggerSizeThresholdBytes: "{{ .Values.storageOffload.managedLedgerOffloadAutoTriggerSizeThresholdBytes }}"
  # Post 2.6.0 value
  PULSAR_PREFIX_managedLedgerOffloadThresholdInBytes: "{{ .Values.storageOffload.managedLedgerOffloadAutoTriggerSizeThresholdBytes }}"
  {{- end }}
  {{- if .Values.storageOffload.managedLedgerOffloadDeletionLagMs }}
  # Pre 2.6.0 value
  managedLedgerOffloadDeletionLagMs: "{{ .Values.storageOffload.managedLedgerOffloadDeletionLagMs }}"
  # Post 2.6.0 value
  PULSAR_PREFIX_managedLedgerOffloadDeletionLagInMillis: "{{ .Values.storageOffload.managedLedgerOffloadDeletionLagMs }}"
  {{- end }}
  {{- if .Values.storageOffload.maxBlockSizeInBytes }}
  gcsManagedLedgerOffloadMaxBlockSizeInBytes: "{{ .Values.storageOffload.maxBlockSizeInBytes }}"
  {{- end }}
  {{- if .Values.storageOffload.readBufferSizeInBytes }}
  gcsManagedLedgerOffloadReadBufferSizeInBytes: "{{ .Values.storageOffload.readBufferSizeInBytes }}"
  {{- end }}
{{- end }}
{{- end }}
  # Transactions
{{- if .Values.brokerSts.transactionCoordinator.enabled }}
  PULSAR_PREFIX_transactionCoordinatorEnabled: "true"
{{- end }}
{{- range $key, $val := $.Values.brokerSts.configData }}
  {{ $key }}: {{ $val | replace "\"" "" | trim | quote }}
{{- end }}
{{- end }}
