#
#  Copyright 2022 DataStax, Inc.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
#

{{- if .Values.extra.pulsarSQL }}
{{- if gt (int .Values.pulsarSQL.server.workers) 0 }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "presto.worker" . }}
  labels:
    app: {{ template "presto.name" . }}
    chart: {{ template "presto.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    component: worker
data:
  node.properties: |
    node.environment={{ .Values.pulsarSQL.server.node.environment }}
    node.data-dir=/pulsar/data

  jvm.config: |
    -server
    -Xmx{{ .Values.pulsarSQL.server.jvm.maxHeapSize }}
    -XX:+{{ .Values.pulsarSQL.server.jvm.gcMethod.type }}
    -XX:G1HeapRegionSize={{ .Values.pulsarSQL.server.jvm.gcMethod.g1.heapRegionSize }}
    -XX:+UseGCOverheadLimit
    -XX:+ExplicitGCInvokesConcurrent
    -XX:+HeapDumpOnOutOfMemoryError
    -XX:+ExitOnOutOfMemoryError
    -Djdk.attach.allowAttachSelf=true

  config.properties: |
    coordinator=false
    http-server.http.port={{ .Values.pulsarSQL.server.config.http.port }}
    query.max-memory={{ .Values.pulsarSQL.server.config.query.maxMemory }}
    query.max-memory-per-node={{ .Values.pulsarSQL.server.config.query.maxMemoryPerNode }}
    discovery.uri=http://{{ template "pulsar.fullname" . }}-{{ .Values.pulsarSQL.component }}:{{ .Values.pulsarSQL.server.config.http.port }}
    catalog.config-dir=/pulsar/conf/presto/catalog

  log.properties: |
    io.prestosql={{ .Values.pulsarSQL.server.log.presto.level }}

  pulsar.properties: |
    connector.name=pulsar
    {{- if .Values.enableTls }}
    pulsar.broker-service-url=https://{{ template "pulsar.fullname" . }}-{{ .Values.broker.component }}.{{ template "pulsar.serviceDnsSuffix" . }}:8443
    pulsar.tls-allow-insecure-connection = false
    pulsar.tls-hostname-verification-enable = false
    {{- if or .Values.secrets .Values.createCertificates.selfSigned.enabled .Values.createCertificates.selfSignedPerComponent.enabled }}
    pulsar.tls-trust-cert-file-path = /pulsar/certs/ca.crt
    {{- else }}
    pulsar.tls-trust-cert-file-path = {{ .Values.tlsCaPath }}/{{ .Values.tlsCaCert }}
    {{- end }}
    {{- else }}
    pulsar.broker-service-url=http://{{ template "pulsar.fullname" . }}-{{ .Values.broker.component }}.{{ template "pulsar.serviceDnsSuffix" . }}:8080
    {{- end }}
    # Can only use 1 Zookeeper as workaround for #6947
    {{- if and .Values.enableTls .Values.tls.zookeeper.enabled }}
    pulsar.zookeeper-uri={{ include "pulsar.zkConnectStringTls" . }}
    {{- else }}
    pulsar.zookeeper-uri={{ include "pulsar.zkConnectString" . }}
    {{- end }}
    pulsar.max-entry-read-batch-size={{ .Values.pulsarSQL.catalog.pulsar.maxEntryReadBatchSize }}
    pulsar.target-num-splits={{ .Values.pulsarSQL.catalog.pulsar.targetNumSplits }}
    pulsar.max-split-message-queue-size={{ .Values.pulsarSQL.catalog.pulsar.maxSplitMessageQueueSize }}
    pulsar.max-split-entry-queue-size={{ .Values.pulsarSQL.catalog.pulsar.maxSplitEntryQueueSize }}
    pulsar.namespace-delimiter-rewrite-enable={{ .Values.pulsarSQL.catalog.pulsar.namespaceDelimiterRewriteEnable }}
    pulsar.rewrite-namespace-delimiter={{ .Values.pulsarSQL.catalog.pulsar.rewriteNamespaceDelimiter }}
    {{- if .Values.enableTokenAuth }}
    pulsar.auth-plugin=org.apache.pulsar.client.impl.auth.AuthenticationToken
    pulsar.auth-params=file:///pulsar/token-superuser-stripped.jwt
    {{- end }}
    # pulsar.managed-ledger-cache-size-MB = {{ .Values.pulsarSQL.catalog.pulsar.managedLedgerCacheSizeMB }}
    {{- if .Values.storageOffload.driver }}
    pulsar.offloaders-directory = /pulsar/offloaders
    pulsar.managed-ledger-offload-max-threads = 2
    pulsar.managed-ledger-offload-driver =  {{ .Values.storageOffload.driver }}
    {{- if eq .Values.storageOffload.driver "aws-s3" }}
    pulsar.offloader-properties = \
      { "s3ManagedLedgerOffloadBucket": "{{ .Values.storageOffload.bucket }}", \
      "s3ManagedLedgerOffloadRegion": "{{ .Values.storageOffload.region }}", \
      "AWS_ACCESS_KEY_ID": "{{ .Values.storageOffload.accessKey }}", \
      "AWS_SECRET_ACCESS_KEY": "{{ .Values.storageOffload.accessSecret }}" }
    {{- end }}
    {{- if eq .Values.storageOffload.driver "s3" }}
    pulsar.offloader-properties = \
      { "s3ManagedLedgerOffloadBucket": "{{ .Values.storageOffload.bucket }}", \
      "s3ManagedLedgerOffloadRegion": "{{ .Values.storageOffload.region }}", \
      "AWS_ACCESS_KEY_ID": "{{ .Values.storageOffload.accessKey }}", \
      "AWS_SECRET_ACCESS_KEY": "{{ .Values.storageOffload.accessSecret }}", \
      "s3ManagedLedgerOffloadServiceEndpoint": "{{ .Values.storageOffload.serviceEndpoint }}" }
    {{- end }}
    {{- if eq .Values.storageOffload.driver "google-cloud-storage" }}
    pulsar.offloader-properties = \
      { "gcsManagedLedgerOffloadBucket": "{{ .Values.storageOffload.bucket }}", \
      "gcsManagedLedgerOffloadRegion": "{{ .Values.storageOffload.region }}", \
      "gcsManagedLedgerOffloadServiceAccountKeyFile": "/pulsar/gcp-service-account/{{ .Values.storageOffload.gcsServiceAccountJsonFile }}" }
    {{- end }}
    {{- end }}

  health_check.sh: |
    #!/bin/bash
    curl --silent {{ template "pulsar.fullname" . }}-{{ .Values.pulsarSQL.component }}:{{ .Values.pulsarSQL.server.config.http.port }}/v1/node | tr "," "\n" | grep --silent $(hostname -i)

---
{{- end }}
{{- end }}