#
#  Copyright 2022 DataStax, Inc.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
#

image:
  brokerSts:
    # If not using tiered storage, you can use the smaller pulsar image for the broker
    repository: datastax/lunastreaming-all
    pullPolicy: IfNotPresent
    tag: 2.8.3_1.0.4
  function:
    repository: datastax/lunastreaming-all
    pullPolicy: IfNotPresent
    tag: 2.8.3_1.0.4
  zookeeper:
    repository: datastax/lunastreaming
    pullPolicy: IfNotPresent
    tag: 2.8.3_1.0.4
  bookkeeper:
    repository: datastax/lunastreaming
    pullPolicy: IfNotPresent
    tag: 2.8.3_1.0.4
  proxy:
    repository: datastax/lunastreaming
    pullPolicy: IfNotPresent
    tag: 2.8.3_1.0.4
  bastion:
    repository: datastax/lunastreaming
    pullPolicy: IfNotPresent
    tag: 2.8.3_1.0.4
  pulsarBeam:
    repository: kesque/pulsar-beam
    pullPolicy: IfNotPresent
    tag: 1.0.0
  burnell:
    repository: datastax/burnell
    pullPolicy: Always
    tag: 1.0.3
  burnellLogCollector:
    repository: datastax/burnell
    pullPolicy: IfNotPresent
    tag: logcollector_latest
  pulsarSQL:
    repository: datastax/lunastreaming-all
    tag: 2.8.3_1.0.4
    pullPolicy: IfNotPresent
  tardigrade:
    repository: storjlabs/gateway
    pullPolicy: IfNotPresent
    tag: 981f92a-v1.20.0-go1.17.5
  pulsarHeartbeat:
    repository: datastax/pulsar-heartbeat
    pullPolicy: IfNotPresent
    tag: 1.0.13

enableAntiAffinity: false
enableTls: true
tls:
  # Enable TLS between ZooKeeper nodes (quorum TLS), between BookKeeper and ZooKeeper, and between
  # broker and ZooKeeper.
  # Note: The configured certificate must allow for both server and client use since it is used
  #       for mTLS. This should be in certificate:
  #
  # X509v3 Extended Key Usage:
  #               TLS Web Server Authentication, TLS Web Client Authentication
  # If using cert-manager, make sure your certificate includes:
  #
  zookeeper:
    enabled: true
    createCertificates: true
    enableHostnameVerification: true
    tlsSecretName: "pulsar-zookeeper-tls"
  bookkeeper:
    enabled: true
    createCertificates: true
    tlsSecretName: "pulsar-bookkeeper-tls"
  function:
    enableTlsWithBroker: true
    createCertificates: true
    tlsSecretName: "pulsar-function-tls"
    enableHostnameVerification: true
  websocket:
    enableTlsWithBroker: true
    enableHostnameVerification: true
  proxy:
    enableTlsWithBroker: true
    enableHostnameVerification: true
    createCertificates: true
    tlsSecretName: "pulsar-proxy-tls"
  broker:
    createCertificates: true
    tlsSecretName: "pulsar-broker-tls"
  # Certificate used for TLS authentication with bookkeeper and zookeeper
  autoRecovery:
    enableHostnameVerification: true
    createCertificates: true
    tlsSecretName: "pulsar-autorecovery-tls"
  pulsarAdminConsole:
    enableTlsWithBroker: true
    createCertificates: true
    tlsSecretName: "pulsar-adminconsole-tls"
  rootCaSecretName: "pulsar-ss-ca"

# The current function worker code only uses TLS connections to brokers when authentication is enabled, so enable it here.
enableTokenAuth: true
restartOnConfigMapChange:
  enabled: true
extra:
  broker: false
  brokerSts: true
  proxy: true
  function: true
  burnellLogCollector: false
  # Note that these deployments currently use the plaintext broker ports
  burnell: true
  pulsarHeartbeat: true
  pulsarAdminConsole: true

cert-manager:
  enabled: true

createCertificates:
  selfSignedPerComponent:
    enabled: true

zookeeper:
  replicaCount: 1
  resources:
    requests:
      memory: 300Mi
      cpu: 0.3
  configData:
    PULSAR_MEM: "-Xms300m -Xmx300m -Djute.maxbuffer=10485760 -XX:+ExitOnOutOfMemoryError"

bookkeeper:
  replicaCount: 1
  resources:
    requests:
      memory: 512Mi
      cpu: 0.3
  configData:
    BOOKIE_MEM: "-Xms312m -Xmx312m -XX:MaxDirectMemorySize=200m -XX:+ExitOnOutOfMemoryError"

brokerSts:
  component: broker
  replicaCount: 1
  ledger:
    defaultEnsembleSize: 1
    defaultAckQuorum: 1
    defaultWriteQuorum: 1
  resources:
    requests:
      memory: 600Mi
      cpu: 0.3
  configData:
    PULSAR_MEM: "-Xms400m -Xmx400m -XX:MaxDirectMemorySize=200m -XX:+ExitOnOutOfMemoryError"

autoRecovery:
  enableProvisionContainer: true
  resources:
    requests:
      memory: 300Mi
      cpu: 0.3

function:
  replicaCount: 1
  functionReplicaCount: 1
  resources:
    requests:
      memory: 512Mi
      cpu: 0.3
  configData:
    PULSAR_MEM: "-Xms312m -Xmx312m -XX:MaxDirectMemorySize=200m -XX:+ExitOnOutOfMemoryError"

proxy:
  replicaCount: 1
  resources:
    requests:
      memory: 512Mi
      cpu: 0.3
  wsResources:
    requests:
      memory: 512Mi
      cpu: 0.3
  configData:
    PULSAR_MEM: "-Xms400m -Xmx400m -XX:MaxDirectMemorySize=112m"
  autoPortAssign:
    enablePlainTextWithTLS: true
  service:
    autoPortAssign:
      enabled: true

grafanaDashboards:
  enabled: false

pulsarAdminConsole:
  replicaCount: 1
  authMode: k8s
  createUserSecret:
    enabled: true
    user: 'admin'
    # NOTE: use your own password
    password: 'e9JYtk83*4#PM8'

kube-prometheus-stack:
  enabled: false
  prometheusOperator:
    enabled: false
  grafana:
    enabled: false
